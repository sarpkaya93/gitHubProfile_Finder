function errorReport(context, node, message, data = {}) {
  return context.report({
    node,
    message,
    data
  });
}

// extracted from https://github.com/eslint/eslint/blob/master/lib/ast-utils.js
function getStaticPropertyName(node) {
  var prop;

  switch (node && node.type) {
    case 'Property':
    case 'MethodDefinition':
      prop = node.key;
      break;

    case 'MemberExpression':
      prop = node.property;
      break;

    // no default
  }

  switch (prop && prop.type) {
    case 'Literal':
      return String(prop.value);

    case 'TemplateLiteral':
    if (prop.quasis.length > 0) {
        return prop.quasis[0].value.cooked;
      }
      break;

    case 'Identifier':
      if (!node.computed) {
        return prop.name;
      }
      break;

    // no default
  }

  return null;
}

function transpile(code, options) {
  return {
    code,
    options,
    parser: 'babel-eslint',
    rules: { strict: 0 }
  };
}

function transpileErrors(code, errors, options) {
  return {
    code,
    errors,
    options,
    parser: 'babel-eslint',
    rules: { strict: 0 }
  };
}

module.exports = {
  errorReport,
  getStaticPropertyName,
  transpile,
  transpileErrors
};
