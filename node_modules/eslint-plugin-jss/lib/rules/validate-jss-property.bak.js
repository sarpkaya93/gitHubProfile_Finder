/**
 * @fileoverview Object is a valid JSS property
 * @author Lucas L.
 */
'use strict';

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------
var camelCase = require('lodash/camelCase');
var globalHelpers = require('../helpers/global');
var jssHelpers = require('../helpers/jss');

var errorReport = globalHelpers.errorReport;
var getStaticPropertyName = globalHelpers.getStaticPropertyName;
var isCamelCase = jssHelpers.isCamelCase;
var isObjectProperty = jssHelpers.isObjectProperty;
var isCombinatorSelector = jssHelpers.isCombinatorSelector;
var isCSSProperty = jssHelpers.isCSSProperty;
var isMediaQuery = jssHelpers.isMediaQuery;
var isPseudoSelector = jssHelpers.isPseudoSelector;

const VALID_PARENT_TYPE = ['VariableDeclarator', 'ExportDefaultDeclaration'];

module.exports = {
  meta: {
    docs: {
      description: 'Object is a valid JSS property',
      category: 'JSS Styles',
      recommended: false
    },
    schema: [
      {
        type: 'object',
        properties: {
          allowCombinatorSelector: {
            type: 'boolean'
          },
          forceCamelCase: {
            type: 'boolean'
          }
        },
        additionalProperties: false
      }
    ]
  },

  create: function(context) {
    var opts = context.options[0] || {};
    var allowCombinatorSelector =
      opts.allowCombinatorSelector === undefined
        ? false
        : opts.allowCombinatorSelector;
    var forceCamelCase =
      opts.forceCamelCase === undefined ? true : opts.forceCamelCase;

    return {
      ObjectExpression(node) {
        node.properties.forEach(function(prop) {
          const property = getStaticPropertyName(prop);
          const parentProperty = getStaticPropertyName(node.parent);

          if (
            prop.type === 'ExperimentalSpreadProperty' ||
            property === null ||
            parentProperty === null
          ) {
            return;
          }

          if (
            VALID_PARENT_TYPE.indexOf(node.parent.type) !== -1 ||
            node.parent.type === 'ObjectExpression' ||
            isMediaQuery(parentProperty)
          ) {
            if (prop.value.type === 'Literal') {
              errorReport(
                context,
                node,
                `Expected object value of '{{property}}' to be an Object`,
                { property }
              );
            }

            return;
          }

          if (!isCSSProperty(property)) {
            if (isPseudoSelector(property) || isMediaQuery(property)) {
              return;
            }

            if (isCombinatorSelector(property)) {
              if (!allowCombinatorSelector) {
                errorReport(
                  context,
                  node,
                  `Expected object keys to not be a combinator selector. '{{property}}' is not a valid.`,
                  { property }
                );
              }
              return;
            }

            errorReport(
              context,
              node,
              `Object key '{{property}}' is not a valid JSS property`,
              { property }
            );
            return;
          } else {
            if (forceCamelCase && !isCamelCase(property)) {
              errorReport(
                context,
                node,
                `Expected object keys to be in camelCase. '{{property}}' should be '{{camelCaseProperty}}'`,
                { property, camelCaseProperty: camelCase(property) }
              );
            }
          }
        });
      }
    };
  }
};
